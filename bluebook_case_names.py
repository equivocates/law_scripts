#!/usr/bin/env python3
# 
# This script takes in text and abbreviates it per bluebook
# Also it does a dumb capitalization re-work.
# Then it returns it to system out. 
# This is meant to be used as a service in macOS.
#
#

import sys, re


WORDS_TO_REPLACE = {
    "Academic": "Acad.",
    "Academy": "Acad.",
    "Accountant": "Acct.",
    "Accounting": "Acct.",
    "Accountancy": "Acct.",
    "Administrative": "Admin.",
    "Administration": "Admin.",
    "Administrator": "Adm’r",
    "Administratrix": "Adm’x",
    "Advertising": "Advert.",
    "Advocate": "Advoc.",
    "Advocacy": "Advoc.",
    "Affair": "Aff.",
    "African": "Afr.",
    "Agriculture": "Agric.",
    "Agricultural": "Agric.",
    "Alliance": "All.",
    "Alternative": "Alt.",
    "Amendment": "Amend.",
    "American": "Am.",
    "Ancestry": "Anc.",
    "and": "&",
    "Annual": "Ann.",
    "Appellate": "App.",
    "Arbitration": "Arb.",
    "Arbitrator": "Arb.",
    "Artificial Intelligence": "A.I.",
    "Associate": "Assoc.",
    "Association": "Ass'n",
    "Atlantic": "Atl.",
    "Attorney": "Att'y",
    "Authority": "Auth.",
    "Automobile": "Auto.",
    "Automotive": "Auto.",
    "Avenue": "Ave.",
    "Bankruptcy": "Bankr.",
    "Behavioral": "Behav.",
    "Board": "Bd.",
    "British": "Brit.",
    "Broadcaster": "Broad.",
    "Broadcasting": "Broad.",
    "Brothers": "Bros.",
    "Brotherhood": "Bhd.",
    "Building": "Bldg.",
    "Bulletin": "Bull.",
    "Businesses": "Bus.",
    "Capital": "Cap.",
    "Casualty": "Cas.",
    "Casualties": "Cas.",
    "Catholic": "Cath.",
    "Center": "Ctr.",
    "Centre": "Ctr.",
    "Central": "Cent.",
    "Chemical": "Chem.",
    "Children": "Child.",
    "Chronicle": "Chron.",
    "Circuit": "Cir.",
    "Civil": "Civ.",
    "Civil Liberty": "C.L.",
    "Civil Liberties": "C.L.",
    "Civil Rights": "C.R.",
    "Coalition": "Coal.",
    "College": "Coll.",
    "Commentary": "Comment.",
    "Commerce": "Com.",
    "Commercial": "Com.",
    "Commission": "Comm'n",
    "Commissioner": "Comm'r",
    "Committee": "Comm.",
    "Communication": "Commc'n",
    "Community": "Cmty.",
    "Company": "Co.",
    "Comparative": "Compar.",
    "Compensation": "Comp.",
    "Computer": "Comput.",
    "Condominium": "Condo.",
    "Conference": "Conf.",
    "Congressional": "Cong.",
    "Consolidated": "Consol.",
    "Constitutional": "Const.",
    "Construction": "Constr.",
    "Contemporary": "Contemp.",
    "Continental": "Cont'l",
    "Contract": "Cont.",
    "Conveyancer": "Conv.",
    "Cooperation": "Coop.",
    "Cooperative": "Coop.",
    "Corporate": "Corp.",
    "Corporation": "Corp.",
    "Correction": "Corr.",
    "Corrections": "Corr.",
    "Correctional": "Corr.",
    "Cosmetic": "Cosm.",
    "Counsel": "Couns.",
    "Counselor": "Couns.",
    "Counselors": "Couns.",
    "Counselor's": "Couns.",
    "County": "Cnty.",
    "Court": "Ct.",
    "Criminal": "Crim.",
    "Defend": "Def.",
    "Defender": "Def.",
    "Defense": "Def.",
    "Delinquent": "Delinq.",
    "Delinquency": "Delinq.",
    "Department": "Dep't",
    "Detention": "Det.",
    "Developer": "Dev.",
    "Development": "Dev.",
    "Digest": "Dig.",
    "Digital": "Digit.",
    "Diplomacy": "Dipl.",
    "Director": "Dir.",
    "Discount": "Disc.",
    "Dispute": "Disp.",
    "Distributor": "Distrib.",
    "Distributing": "Distrib.",
    "Distribution": "Distrib.",
    "District": "Dist.",
    "Division": "Div.",
    "Doctor": "Dr.",
    "Eastern": "E.",
    "Economic": "Econ.",
    "Economical": "Econ.",
    "Economics": "Econ.",
    "Economy": "Econ.",
    "Editorial": "Ed.",
    "Educational": "Educ.",
    "Electric": "Elec.",
    "Electrical": "Elec.",
    "Electricity": "Elec.",
    "Electronic": "Elec.",
    "Employee": "Emp.",
    "Employer": "Emp.",
    "Employment": "Emp.",
    "Enforcement": "Enf't",
    "Engineer": "Eng'r",
    "Engineering": "Eng'g",
    "English": "Eng.",
    "Enterprise": "Enter.",
    "Entertainment": "Ent.",
    "Environmental": "Env't",
    "Equality": "Equal.",
    "Equipment": "Equip.",
    "Estate": "Est.",
    "European": "Eur.",
    "Examiner": "Exam'r",
    "Exchange": "Exch.",
    "Executive": "Exec.",
    "Executor": "Ex'r",
    "Executrix": "Ex'x",
    "Exploration": "Expl.",
    "Exploratory": "Expl.",
    "Exporter": "Exp.",
    "Exportation": "Exp.",
    "Faculty": "Fac.",
    "Family": "Fam.",
    "Federal": "Fed.",
    "Federation": "Fed'n",
    "Fidelity": "Fid.",
    "Finance": "Fin.",
    "Financial": "Fin.",
    "Financing": "Fin.",
    "Fortnightly": "Fort.",
    "Forum": "F.",
    "Foundation": "Found.",
    "General": "Gen.",
    "Global": "Glob.",
    "Government": "Gov't",
    "Group": "Grp.",
    "Guaranty": "Guar.",
    "Guarantor": "Guar.",
    "Hispanic": "Hisp.",
    "Historical": "Hist.",
    "History": "Hist.",
    "Hospitality": "Hosp.",
    "Housing": "Hous.",
    "Human": "Hum.",
    "Humanity": "Human.",
    "Immigration": "Immigr.",
    "Importer": "Imp.",
    "Importation": "Imp.",
    "Incorporated": "Inc.",
    "Indemnity": "Indem.",
    "Independence": "Indep.",
    "Independent": "Indep.",
    "Industry": "Indus.",
    "Industrial": "Indus.",
    "Industries": "Indus.",
    "Inequality": "Ineq.",
    "Information": "Info.",
    "Injury": "Inj.",
    "Institute": "Inst.",
    "Institution": "Inst.",
    "Insurance": "Ins.",
    "Intellectual": "Intell.",
    "Intelligence": "Intel.",
    "Interdisciplinary": "Interdisc.",
    "Interest": "Int.",
    "International": "Int'l",
    "Investment": "Inv.",
    "Investor": "Inv.",
    "Journal": "J.",
    "Journals": "J.",
    "Judicial": "Jud.",
    "Juridical": "Jurid.",
    "Jurisprudence": "Juris.",
    "Justice": "Just.",
    "Juvenile": "Juv.",
    "Labor": "Lab.",
    "Laboratory": "Lab'y",
    "Law": "L.",
    "Lawyer": "Law.",
    "Legislation": "Legis.",
    "Legislative": "Legis.",
    "Liability": "Liab.",
    "Library": "Libr.",
    "Librarian": "Libr.",
    "Limited": "Ltd.",
    "Litigation": "Litig.",
    "Local": "Loc.",
    "Machinery": "Mach.",
    "Magazine": "Mag.",
    "Maintenance": "Maint.",
    "Management": "Mgmt.",
    "Manufacturer": "Mfr.",
    "Manufacturing": "Mfg.",
    "Maritime": "Mar.",
    "Market": "Mkt.",
    "Marketing": "Mktg.",
    "Matrimonial": "Matrim.",
    "Mechanical": "Mech.",
    "Medical": "Med.",
    "Medicinal": "Med.",
    "Medicine": "Med.",
    "Memorial": "Mem'l",
    "Merchant": "Merch.",
    "Merchandise": "Merch.",
    "Merchandising": "Merch.",
    "Metropolitan": "Metro.",
    "Military": "Mil.",
    "Mineral": "Min.",
    "Modern": "Mod.",
    "Mortgage": "Mortg.",
    "Municipal": "Mun.",
    "Municipality": "Mun.",
    "Mutual": "Mut.",
    "National": "Nat'l",
    "Nationality": "Nat'y",
    "Natural": "Nat.",
    "Negligence": "Negl.",
    "Negotiation": "Negot.",
    "Negotiator": "Negot.",
    "Newsletter": "Newsl.",
    "Northern": "N.",
    "Northeastern": "Ne.",
    "Northwestern": "Nw.",
    "Number": "No.",
    "Office": "Off.",
    "Official": "Off.",
    "Opinion": "Op.",
    "Order": "Ord.",
    "Organization": "Org.",
    "Organizing": "Org.",
    "Pacific": "Pac.",
    "Parish": "Par.",
    "Partnership": "P'ship",
    "Patent": "Pat.",
    "Personal": "Pers.",
    "Personnel": "Pers.",
    "Perspective": "Persp.",
    "Pharmaceutical": "Pharm.",
    "Philosophical": "Phil.",
    "Philosophy": "Phil.",
    "Planning": "Plan.",
    "Policy": "Pol'y",
    "Political": "Pol.",
    "Politics": "Pol.",
    "Practical": "Prac.",
    "Practice": "Prac.",
    "Practititioner": "Prac.",
    "Preserve": "Pres.",
    "Preservation": "Pres.",
    "Privacy": "Priv.",
    "Private": "Priv.",
    "Probate": "Prob.",
    "Probation": "Prob.",
    "Problems": "Probs.",
    "Proceedings": "Proc.",
    "Procedure": "Proc.",
    "Production": "Prod.",
    "Professional": "Pro.",
    "Property": "Prop.",
    "Protection": "Prot.",
    "Psychological": "Psych.",
    "Psychologist": "Psych.",
    "Psychology": "Psych.",
    "Public": "Pub.",
    "Publication": "Publ'n",
    "Publishing": "Publ'g",
    "Quarterly": "Q.",
    "Railroad": "R.R.",
    "Railway": "Ry.",
    "Record": "Rec.",
    "Referee": "Ref.",
    "Refining": "Refin.",
    "Refinement": "Refin.",
    "Regional": "Reg'l",
    "Register": "Reg.",
    "Regulation": "Regul.",
    "Regulator": "Regul.",
    "Regulatory": "Regul.",
    "Rehabilitation": "Rehab.",
    "Rehabilitative": "Rehab.",
    "Relation": "Rel.",
    "Reporter": "Rep.",
    "Reproduction": "Reprod.",
    "Reproductive": "Reprod.",
    "Research": "Rsch.",
    "Reservation": "Rsrv.",
    "Reserve": "Rsrv.",
    "Resolution": "Resol.",
    "Resources": "Res.",
    "Responsibility": "Resp.",
    "Restaurant": "Rest.",
    "Retirement": "Ret.",
    "Review, Revista": "Rev.",
    "Rights": "Rts.",
    "Road": "Rd.",
    "Savings": "Sav.",
    "School": "Sch.",
    "Science": "Sci.",
    "Scientific": "Sci.",
    "Scottish": "Scot.",
    "Secretary": "Sec'y",
    "Security": "Sec.",
    "Securities": "Sec.",
    "Sentencing": "Sent'g",
    "Service": "Serv.",
    "Shareholder": "S'holder", 
    "Stockholder": "S'holder",
    "Social": "Soc.",
    "Society": "Soc'y",
    "Sociological": "Socio.",
    "Sociology": "Socio.",
    "Solicitor": "Solic.",
    "Solution": "Sol.",
    "Southern": "S.",
    "Southeastern": "Se.",
    "Southwestern": "Sw.",
    "Statistics": "Stat.",
    "Statistical": "Stat.",
    "Steamships": "S.S.",
    "Street": "St.",
    "Studies": "Stud.",
    "Subcommittee": "Subcomm.",
    "Supreme Court": "Sup. Ct.",
    "Surety": "Sur.",
    "Survey": "Surv.",
    "Symposium": "Symp.",
    "Systems": "Sys.",
    "Taxation": "Tax'n",
    "Teacher": "Tchr.",
    "Technical": "Tech.",
    "Technique": "Tech.",
    "Technology": "Tech.",
    "Technological": "Tech.",
    "Telecommunication": "Telecomm.",
    "Telephone": "Tel.",
    "Telegraph": "Tel.",
    "Temporary": "Temp.",
    "Township": "Twp.",
    "Transcontinental": "Transcon.",
    "Transnational": "Transnat'l",
    "Transportation": "Transp.",
    "Tribune": "Trib.",
    "Trustee": "Tr.",
    "Turnpike": "Tpk.",
    "Uniform": "Unif.",
    "United States": "U.S.",
    "University": "Univ.",
    "Urban": "Urb.",
    "Utility": "Util.",
    "Village": "Vill.",
    "Week": "Wk.",
    "Weekly": "Wkly.",
    "West": "W.",
    "Western": "W.",
    "Yearbook": "Y.B.",
    "Year Book": "Y.B." 
}

STATES_ABBR = {
    "Alabama": "Ala.",
    "Alaska": "Alaska",
    "Arizona": "Ariz.",
    "Arkansas": "Ark.",
    "California": "Cal.",
    "Colorado": "Colo.",
    "Connecticut": "Conn.",
    "Delaware": "Del.",
    "District of Columbia": "D.C.",
    "Florida": "Fla.",
    "Georgia": "Ga.",
    "Hawaii": "Haw.",
    "Idaho": "Idaho",
    "Illinois": "Ill.",
    "Indiana": "Ind.",
    "Iowa": "Iowa",
    "Kansas": "Kan.",
    "Kentucky": "Ky.",
    "Louisiana": "La.",
    "Maine": "Me.",
    "Maryland": "Md.",
    "Massachusetts": "Mass.",
    "Michigan": "Mich.",
    "Minnesota": "Minn.",
    "Mississippi": "Miss.",
    "Missouri": "Mo.",
    "Montana": "Mont.",
    "Nebraska": "Neb.",
    "Nevada": "Nev.",
    "New Hampshire": "N.H.",
    "New Jersey": "N.J.",
    "New Mexico": "N.M.",
    "New York": "N.Y.",
    "North Carolina": "N.C.",
    "North Dakota": "N.D.",
    "Ohio": "Ohio",
    "Oklahoma": "Okla.",
    "Oregon": "Or.",
    "Pennsylvania": "Pa.",
    "Rhode Island": "R.I.",
    "South Carolina": "S.C.",
    "South Dakota": "S.D.",
    "Tennessee": "Tenn.",
    "Texas": "Tex.",
    "Utah": "Utah",
    "Vermont": "Vt.",
    "Virginia": "Va.",
    "Washington": "Wash.",
    "West Virginia": "W. Va.",
    "Wisconsin": "Wis.",
    "Wyoming": "Wyo." 
    } 
WORDS_TO_REPLACE.update(STATES_ABBR)

def replace_words(text, word_map):
    # Create a regex pattern to match any of the words in the dictionary, case insensitive
    pattern = re.compile(r'\b(' + '|'.join(map(re.escape, word_map.keys())) + r')\b', re.IGNORECASE)
    
    # Function to replace matched words with their abbreviations
    def replace(match):
        word = match.group(0)  # Get the matched word from the text
        
        # Find the matching key in the dictionary, case-insensitively
        matching_key = next(
            key for key in WORDS_TO_REPLACE 
            if key.lower() == word.lower()
        )
        
        # Get the abbreviation using the matching key
        abbreviation = WORDS_TO_REPLACE[matching_key]
    
        return abbreviation

    # Use the pattern to substitute words in the text
    return pattern.sub(replace, text)

def title_case_special(text):
    """
    Capitalizes every word in the text except articles, conjunctions, and prepositions,
    unless they are the first word in a sentence.
    """
    # List of words to keep lowercase unless they are the first word
    lowercase_words = {
        "a", "an", "the",       # Articles
        "and", "but", "or", "nor", "for", "so", "yet",  # Conjunctions
        "in", "on", "at", "by", "with", "from", "to", "of", "about", "as", "into", 
        "like", "through", "over", "between", "out", "against", "during", "without", 
        "before", "after", "above", "below", "near", "up", "down", "off", "over", 
        "under", "again", "further"  # Prepositions
    }
    words = text.split()
    if not words:
        return text
    
    result = [words[0].capitalize()]
    for word in words[1:]:
        if word.lower() in lowercase_words:
            result.append(word.lower())
        else:
            result.append(word.capitalize())

    return ' '.join(result).strip()

if __name__ == "__main__":
    text = title_case_special(sys.argv[-1])
    print(replace_words(text, WORDS_TO_REPLACE))